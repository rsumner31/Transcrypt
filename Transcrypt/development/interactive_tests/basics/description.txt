This test is for the basic facilities of Transcrypt.
It has been run on Windows 8 and Chrome.
Eventually Linux will be drawn into the game.
Note that this is a very first start to investigate feasibility.
It seems feasible indeed.
It's fun as well...

- Classes
- Multiple inheritance
- Hierarchical modules
- Assignment of bound functions

Compile the test with: python35 ..\..\..\transcrypt.py -b -v test.py
Click on the html file to run the test in your browser.

N.B. Python 3.5 is obligatory at this stage, no other version, sinc

Then from the command prompt this directory run: python35 ..\..\..\transcrypt.py -b -v -r test.py
The output at the command prompt and in the browser (including browser debugging console (f12 in Chrome) should be the same.

The compilation result for only the main module (test.py) is included below to get an idea.
It is rather compact and easy to follow and debug.
Of course it should eventually be minified.
At this moment the closure compiler speaks of some trouble doing that, you can neglect its errors and warnings.

function test () {
	(function () {
		var testmod = {};
		var testmod2 = {};
		;
		__nest__ (testmod, '', __init__ (__world__.testmod));
		__nest__ (testmod2, '', __init__ (__world__.testmod2));
		__nest__ (testmod2, 'testmod21', __init__ (__world__.testmod2.testmod21));
		console.log ('test');
		testmod.f ();
		testmod2.f ();
		testmod2.testmod21.f ();
		var A = __class__ ('A', [object], {
			get __init__ () {return __get__ (this, function (self, x) {
				self.x = x;
			});},
			get show () {return __get__ (this, function (self, label) {
				print ('A.show', label, self.x);
			});}
		});
		var B = __class__ ('B', [object], {
			get __init__ () {return __get__ (this, function (self, y) {
				alert ('In B constructor');
				self.y = y;
			});},
			get show () {return __get__ (this, function (self, label) {
				print ('B.show', label, self.y);
			});}
		});
		var C = __class__ ('C', [A, B], {
			get __init__ () {return __get__ (this, function (self, x, y) {
				alert ('In C constructor');
				A.__init__ (self, x);
				B.__init__ (self, y);
				self.show ('constructor');
			});},
			get show () {return __get__ (this, function (self, label) {
				B.show (self, label);
				print ('C.show', label, self.x, self.y);
			});}
		});
		var a = A (1001);
		a.show ('america');
		var b = B (2002);
		b.show ('russia');
		var c = C (3003, 4004);
		c.show ('netherlands');
		var show2 = c.show;
		show2 ('copy');
		var f = function (a, b) {
			print (a, b);
		};
		f (10, 20);
		print (1, 2, 3, 4);
		print (5, 6, 7, 8);
		console.log ('terminated');
	}) ();
	return __all__;
}



